<?phpnamespace Share\Model;use Think\Model;use Think\Log;class ShareModel extends Model {    protected $tableName = 'share';    protected $pk        = 'id';    public $join            = '';    public $string          = '';    public $field           = '';    /**     * 数据格式化     * @param array $list     * @param int   $uid     */    private function _format($list, $uid=0){        $_list = array();        if ($list) {            $user = new \User\Model\UserModel();            $groups = new \Share\Model\GroupModel();            foreach ($list as $k=>$v){                $tmp = $v;                //图片                unset($tmp['content']);                unset($tmp['images']);                $tmp['video_url'] = $tmp['video'];                unset($tmp['video']);                $contentList = M("share_gallery")->where(array('share_id'=>$v['id']))->field("content,images,video")->select();                $tmpArr = array();                foreach($contentList as $item){                    if($item['images']){                        $item['images'] = json_decode($item['images'],true);                        foreach ($item['images'] as &$value){                            $value['originUrl'] = site_url($value['originUrl']);                            $value['smallUrl'] = site_url($value['smallUrl']);                        }                    }else{                        $item['images'] = array();                    }                    if($item['video']){                        $item['video'] = json_decode($item['video'],true);                        foreach ($item['video'] as &$value){                            $value['originUrl'] = site_url($value['originUrl']);                            $value['smallUrl'] = site_url($value['smallUrl']);                        }                    }else{                        $item['video'] = array();                    }                    if($item['content'] || $item['images'] || $item['video']){                        $tmpArr[] = $item;                    }                }                $tmp['contentList'] = $tmpArr?$tmpArr:array();                //用户                $tmp['user'] = $user->getUserName($v['uid']);                //群                if ($v['cateid']){                    //取默认号                    /*  $groups->string = 'uid='.$uid.' and `isdefault`=1';                     $groups->field  = 'id, name,background';                     $temp = $groups->public_list($uid, array(), 1);                     $tmp['groups'] = $temp ? $temp : new \stdClass(); */                    $tmp['groups'] =  new \stdClass();                }else {                    if ($v['groupids']){                        //$groups->string = 'id in('.$v['groupids'].') and `uid`='.$uid;                        $groups->string = 'u.id in('.$v['groupids'].') ';                        $groups->field  = 'u.id, u.name,background';                        $temp = $groups->public_list($uid, array(), 1);                        $tmp['groups'] = $temp ? $temp : new \stdClass();                    }else {                        $tmp['groups'] = new \stdClass();                    }                }                //回复                $reply = new ReplyModel();                $tmp['reply'] = $reply->public_list($uid, array('shareid'=>$v['id']), 3);                //转发                $tmp['forward'] = new \stdClass();                if ($v['rootid']){                    $forward = self::public_list($uid, array('id'=>$v['rootid']), 1);                    $tmp['forward'] = $forward ? $forward : new \stdClass();                }                //类别图片                $tmp['categorylogo'] = $v['categorylogo'] ? SITE_PROTOCOL.SITE_URL.$v['categorylogo'] : '';                $_list[] = $tmp;            }        }        return $_list;    }    /**     * 列表     * @param int $uid     * @param array $map     * @param string $limit     * @param string $order     * @return array     */    function public_list($uid, $map, $limit, $order='createtime desc'){        $join = '';        //自定义字段        if ($this->field) {            $field = $this->field;        }else {            $field = 's.*';        }        //自定义联合查询        if ($this->join) $join .= $this->join;        //自定义条件        if ($this->string) $map['_string'] = $this->string;        //是否赞        $field .= ',(select count(*) from `'.$this->tablePrefix.'share_praise` where uid='.$uid.' and shareid=s.id) as ispraise';        //赞数        //$field .= ',(select count(*) from `'.$this->tablePrefix.'messages_praise` where msgid=s.id) as praisecount';        //获取类别        $field .= ',ifnull((select `name` from `'.$this->tablePrefix.'share_category` where id=s.cateid),\'\') as categoryname';        //类别图片        $field .= ',ifnull((select `logo` from `'.$this->tablePrefix.'share_category` where id=s.cateid),\'\') as categorylogo';        $list  = $this->alias('s')->field($field)->where($map)->join($join)->order($order)->limit($limit)->select();        $_list = self::_format($list,$uid);        if (($limit == 1) && $_list) {            return $_list['0'];        }else {            return $_list;        }    }    /**     * 公共的用户列表     */    private function _list($map, $uid, $order='s.createtime desc'){        //自定义条件        if ($this->string) $map['_string'] = $this->string;        $total = $this->alias('s')->where($map)->count();        if ($total) {            $page  = page($total);            $limit = $page['offset'] .','. $page['limit'];        }else {            $page  = '';        }        $list = $total ? self::public_list($uid, $map, $limit, $order) : array();        return showData($list, '', 0, $page);    }    function shareDetail($uid, $data){        $list = self::public_list($uid, $data, 1);        return showData($list);    }    /**     * 发布分享     */    function addShare($uid, $id=0, $type=0) {        //检查权限        $access = sendMessageCount($uid, 1);        if ($access['code']) return $access;        $data = array(            'uid'        => $uid,            'cateid'     => trim(I('cateid')),            'groupids'   => trim(I('groupids')),            'title'    => trim(I('title')),            'content'    => trim(I('content1')),            'images'     => '',            'video'     => trim(I('video')),            'createtime' => NOW_TIME,            'address'    => trim(I('address')),            'lat'        => trim(I('lat')),            'lng'        => trim(I('lng')),            'city'       => '',            'province'   => '',        );        $dataList = array(            'content1' => array('content' => trim(I('content1')),'images'=>'','video'=>'','create_time'=>NOW_TIME),            'content2' => array('content' => trim(I('content2')),'images'=>'','video'=>'','create_time'=>NOW_TIME),            'content3' => array('content' => trim(I('content3')),'images'=>'','video'=>'','create_time'=>NOW_TIME),            'content4' => array('content' => trim(I('content4')),'images'=>'','video'=>'','create_time'=>NOW_TIME),            'content5' => array('content' => trim(I('content5')),'images'=>'','video'=>'','create_time'=>NOW_TIME),            'content6' => array('content' => trim(I('content6')),'images'=>'','video'=>'','create_time'=>NOW_TIME)        );        if ($type){            $data['rootid'] = $id;            $data['type']   = 1;        }else{            /* if (!$data['title']) {                return showData(new \stdClass(), '请输入标题', 1);            } */            if (!$data['content'] && count($_FILES) <= 0) {                return showData(new \stdClass(), '请输入分享内容', 1);            }else {                /*                $rule   = '[emoji_[\d]{0,3}]';                $result = preg_replace($rule, 'a', $data['content']);                $result = str_replace('[a]', 'a', $result);                if (iconv_strlen($result,"UTF-8") > 300) return showData(new \stdClass(), '输入的内容太长了', 1);                */            }            if (!empty($_FILES)){                if (count($_FILES) > 6){                    return showData(new \stdClass(), '你上传的图片太多了', 1);                }else {                    $images = upload('','','',true);                    if (is_array($images)){                        if ($type){                            $dataList['content1']['images'] = urldecode(json_encode(utf8_to_urlencode($images)));                        }else{                            //判断是视频还是图片                            foreach ($images as $k=>$v){                                $tmpArr = explode('_',$v['key']);                                if ($v['isVideo']){                                    $t = array($v);                                    $dataList[$tmpArr[0]]['video'] = urldecode(json_encode(utf8_to_urlencode($t)));                                }else {                                    $t = array($v);                                    $dataList[$tmpArr[0]]['images'] = urldecode(json_encode(utf8_to_urlencode($t)));                                }                            }                        }                    }else {                        return showData(new \stdClass(), $images, 1);                    }                }                $data['images'] = $dataList['content1']['images'];            }        }//        $i = 1;//        foreach ($dataList as $v){//            if (iconv_strlen($v['content'],"UTF-8")>300) {//                return showData(new \stdClass(), '第'.$i.'段内容太长了', 1);//            }//            $i++;//        }//        if (iconv_strlen($data['content'],"UTF-8")>300) {//            return showData(new \stdClass(), '输入的内容太长了', 1);//        }        //检查是否有默认号        if (!$data['cateid'] && !$data['groupids']) return showData(new \stdClass(), '请选择一个类别或者号', 1);        /*        if ($data['cateid']) {            if (!M('groups')->where(array('uid'=>$uid, 'isdefault'=>1))->count()){                return showData(new \stdClass(), '请设置默认号', 1);            }        }*/        if (!$data['address']) return showData(new \stdClass(), '请选择地址', 1);        if (!$data['lat'] || !$data['lng']) {            return showData(new \stdClass(), '请选择地址', 1);        }else {            //取得权限            $accessData = getMemberAccess($uid);            //取得城市            $result = getDetailAddress($data['lat'], $data['lng']);            $city   =  $result['result']['addressComponent']['city'];            $province = $result['result']['addressComponent']['province'];            if ($result){                switch ($accessData['isvisible']) {                    case 0:                        $data['city'] = $city;                        break;                    case 1:                        $data['city'] = $province;                        break;                    case 2:                        $data['city'] = '全国';                        break;                }                //$data['province'] = $result['result']['addressComponent']['province'];            }        }                $id = $this->add($data);        if ($id){            $tmpList = array();            foreach($dataList as $item){                if(empty($item['content']) && empty($item['images']) && empty($item['video'])){                    continue;                }                $item['share_id'] = $id;                $tmpList[] = $item;            }            M('share_gallery')->addAll($tmpList);            //添加用户积分            M('user')->where(array('uid'=>$data['uid']))->setInc('integral',1);            return showData(new \stdClass(), '发布成功');        }        return showData(new \stdClass(), '发布失败', 1);    }    /**     * 分享列表（0动态-只显示自己发布的 1-关注 显示关注的群的内容 2-号的动态）     */    function lists($uid, $id) {        \Think\Log::write("request = ".json_encode($_REQUEST),'ERR','',C('LOG_PATH').date('y_m_d').'-----.log');        $action = trim(I('action', 0));        //红点提醒        $tip  = M('message_tip')->where(array('uid'=>$uid))->count();        if ($action){            if ($tip) {                M('message_tip')->where(array('uid'=>$uid))->setField('time4', NOW_TIME);            }else {                M('message_tip')->add(array('uid'=>$uid, 'time4'=>NOW_TIME));            }        }else {            if ($tip) {                M('message_tip')->where(array('uid'=>$uid))->setField('time3', NOW_TIME);            }else {                M('message_tip')->add(array('uid'=>$uid, 'time3'=>NOW_TIME));            }        }        $map    = array();        $data   = showData(array());        switch ($action) {            case 0:                //取得省市                $lat    = trim(I('lat'));                $lng    = trim(I('lng'));                if (!$lat || !$lng) return showData(new \stdClass(), '请先定位', 1);                $result   = getDetailAddress($lat, $lng);                $city     = $result['result']['addressComponent']['city'];                $province = $result['result']['addressComponent']['province'];                //根据会员的权限来显示                /*                $access = getMemberAccess($uid);                                switch ($access['isvisible']){                    case 0:                        //当地                        $map['_string'] = "`city`='".$city."' or `province`='".$province."'";                        break;                    case 1:                        //全省                        $map['_string'] = "`city`='".$city."' or `province`='".$province."'";                        break;                    case 2:                        //全国                        $map['_string'] = "`city`='".$city."' or `province`='".$province."'";                        break;                }*/                //$map['uid'] = $uid;                $string = "(`city`='".$city."' or `city`='".$province."' or `city`='全国')";                $this->string = $string.' and';                $this->string .=" uid in( select uu.uid from ".$this->tablePrefix."user uu where uu.uid=uid and uu.isshield = 0) and uid not in ( select ub.fuid from ".$this->tablePrefix."user_black ub where ub.uid=$uid)";                $data = self::_list($map, $uid);                break;            case 1:                //获取我关注的群                $arr = M('groups_follow')->field('groupsid')->where('`groupsid`>0 and `uid` ='.$uid.' and `groupsid` not in(select `groupsid` from '.$this->tablePrefix.'groups_black where uid='.$uid.') and `uid` not in(select `uid` from `'.$this->tablePrefix.'user` where isshield=1)')->select();                $string = '';                if ($arr){                    foreach ($arr as $k=>$v){                        $string .= 'find_in_set('.$v['groupsid'].', `groupids`) or ';                    }                    $this->string = $string;                }                //获取我关注的人                $string .= ' (s.uid in(select `fuid` from `'.$this->tablePrefix.'user_follow` where uid='.$uid.') and s.uid not in(select `fuid` from `'.$this->tablePrefix.'user_black` where uid='.$uid.')) ';                $this->string = '('.$string.') and s.uid not in(select uid from tc_user where isshield = 1)';                $data = self::_list($map, $uid);                break;            case 2:                $this->string = 'find_in_set('.$id.', `groupids`)';                $data = self::_list($map, $uid);                break;        }        Log::write("shareList=" . json_encode($data));        return $data;    }    /**     * 某个类别下的分享     * @param unknown $uid     * @param unknown $id     * @return Ambigous <multitype:, multitype:unknown \Org\Util\string number >     */    function categorysharelists($uid, $id) {        $this->string = 'cateid=' . $id;        $data = self::_list($map, $uid);        return $data;    }    /**     * 分享详细     * @param number $uid     */    function detail($uid, $id){        $map  = array('id'=>$id);        $data = self::public_list($uid, $map, 1);        return showData($data);    }    /**     * 添加赞和取消赞     * @param int $uid     * @param int $id     */    function praise($uid, $id) {        //$action = trim(I('action', 0));        $data   = array('uid'=>$uid, 'shareid'=>$id);        $db     = M('share_praise');        $count  = $db->where($data)->count();        /* if ($action) {            //取消赞            if (!$count) return showData(new \stdClass(), '你没有赞该留言', 1);            if ($db->where($data)->delete()){                $this->where(array('id'=>$id))->setDec('praisecount');                return showData(new \stdClass(), '取消赞成功');            }            return showData(new \stdClass(), '取消赞失败', 1);        }else { */            //添加赞        if ($count) return showData(new \stdClass(), '你已赞了该留言', 1);        $data['createtime'] = NOW_TIME;        if ($db->add($data)){            $this->where(array('id'=>$id))->setInc('praisecount', 1);            return showData(new \stdClass(), '添加赞成功');        }        return showData(new \stdClass(), '添加赞失败', 1);        //}    }    /**     * 删除留言     * @param unknown $uid     * @param unknown $id     */    function delShare($uid, $id)    {        $where = "uid = $uid and id = $id";        $result = M("share")->where($where)->delete();        if(!$result) {            return showData(new \stdClass(), "操作失败", 1);        }        return showData(new \stdClass(), "操作成功");    }}