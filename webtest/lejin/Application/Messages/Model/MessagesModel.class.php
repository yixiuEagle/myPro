<?php/** * 留言 */namespace Messages\Model;use Think\Model;use Think\Log;class MessagesModel extends Model {    protected $tableName = 'messages';    protected $pk        = 'id';    public $join            = '';    public $string          = '';    public $field           = '';        /**     * 数据格式化     * @param array $list     * @param int   $uid     */    private function _format($list, $uid=0){        $_list = array();        if ($list) {            foreach ($list as $k=>$v){                $tmp = $v;                //图片	            $tmp['images'] = array();	            if ($v['images']) {	                $plist = json_decode($v['images'], true);	                foreach ($plist as $kp=>$vp){	                    $plist[$kp]['originUrl'] = SITE_PROTOCOL.SITE_URL.$vp['originUrl'];	                    $plist[$kp]['smallUrl']  = SITE_PROTOCOL.SITE_URL.$vp['smallUrl'];	                }	                $tmp['images'] = $plist;	            }	            //视频	            $tmp['video'] = array();	            if ($v['video']){	                $vlist = json_decode($v['video'], true);	                foreach ($vlist as $kv=>&$vv){	                    $vv['originUrl'] = SITE_PROTOCOL.SITE_URL.$vv['originUrl'];	                    $vv['smallUrl']  = SITE_PROTOCOL.SITE_URL.$vv['smallUrl'];	                }	                $tmp['video'] = $vlist;	            }                //用户                $user = new \User\Model\UserModel();                $tmp['user'] = $user->getUserName($v['uid']);                //回复                $reply = new ReplyModel();                $tmp['reply'] = $reply->public_list($uid, array('msgid'=>$v['id']), 3);                //转发                $tmp['forward'] = new \stdClass();                if ($v['rootid']){                    $forward = self::public_list($uid, array('id'=>$v['rootid']), 1);                    $tmp['forward'] = $forward ? $forward : new \stdClass();                }                $_list[] = $tmp;            }        }        return $_list;    }    /**     * 列表     * @param int $uid     * @param array $map     * @param string $limit     * @param string $order     * @return array     */    function public_list($uid, $map, $limit, $order='createtime desc'){        $join = '';        //自定义字段        if ($this->field) {            $field = $this->field;        }else {            $field = 's.*';        }        //自定义联合查询        if ($this->join) $join .= $this->join;        //自定义条件        if ($this->string) $map['_string'] = $this->string;        //计算距离        $lat   = trim(I('lat')); //纬度        $lng   = trim(I('lng')); //经度        if ($lat && $lng) {            $field .= ",round(getDistance('".$lng."','".$lat."',s.lng,s.lat)) as distance";        }        //是否赞        $field .= ',(select count(*) from `'.$this->tablePrefix.'messages_praise` where uid='.$uid.' and msgid=s.id) as ispraise';        //赞数        $field .= ',(select count(*) from `'.$this->tablePrefix.'messages_praise` where msgid=s.id) as praisecount';            $list  = $this->alias('s')->field($field)->where($map)->join($join)->order($order)->limit($limit)->select();        $_list = self::_format($list,$uid);        if (($limit == 1) && $_list) {            return $_list['0'];        }else {            return $_list;        }    }    /**     * 公共的用户列表     */    private function _list($map, $uid, $order='s.createtime desc'){        //自定义条件        if ($this->string) $map['_string'] = $this->string;            $total = $this->alias('s')->where($map)->count();        if ($total) {            $page  = page($total);            $limit = $page['offset'] .','. $page['limit'];        }else {            $page  = '';        }        $list = $total ? self::public_list($uid, $map, $limit, $order) : array();        return showData($list, '', 0, $page);    }        /**     * 发布留言     * @param integer $uid 发布人     * @param integer $type 0-大家帮 1-xxx     */    function addMessages($uid, $id=0, $status=0) {        //检查权限        $access = sendMessageCount($uid, 0);        if ($access['code']) return $access;                $type = trim(I('type', 0));        $data = array(            'uid'        => $uid,            'content'    => trim(I('content')),            'createtime' => NOW_TIME,            'lat'        => trim(I('lat', 0)),            'lng'        => trim(I('lng', 0)),            'type'       => $type,            'city'      => '',        );        if ($status){            $data['rootid'] = $id;            $data['status']   = 1;        }else{            //判断字数为30字            if (!$data['content']) {                return showData(new \stdClass(), '请输入内容', 1);            }else {                if ($type==1){                    $number = 300;                    //if ($type) $number = 300;                    $rule   = '[emoji_[\d]{0,3}]';                    $result = preg_replace($rule, 'a', $data['content']);                    $result = str_replace('[a]', 'a', $result);//                if (iconv_strlen($result,"UTF-8") > $number) return showData(new \stdClass(), '输入的内容太长了', 1);                }            }        }        if (!$data['lat'] || !$data['lng']) return showData(new \stdClass(), '请先定位', 1);        $city = getDetailAddress($data['lat'], $data['lng']);        if ($city) $data['city'] = $city['result']['addressComponent']['city'];        //1-xxx        if ($type){                if (!empty($_FILES)){                    if (count($_FILES) > 6){                        return showData(new \stdClass(), '你上传的图片太多了', 1);                    }else {                        $images = upload();                        if (is_array($images)){                            //判断是视频还是图片                            $isvideo = false;                            foreach ($images as $k=>$v){                                if ($v['key'] == 'video') $isvideo = true;                            }                            if ($isvideo){                                $data['video'] = urldecode(json_encode(utf8_to_urlencode($images)));                            }else {                                $data['images'] = urldecode(json_encode(utf8_to_urlencode($images)));                            }                        }else {                            return showData(new \stdClass(), $images, 1);                        }                    }                }//                else {////                    if (!$status){////                        return showData(new \stdClass(), '请上传图片', 1);////                    }////                }        }else {            if (!empty($_FILES)){                if (count($_FILES) > 3){                    return showData(new \stdClass(), '你上传的图片太多了', 1);                }else {                    $images = upload();                    if (is_array($images)){                        //判断是视频还是图片                        $isvideo = false;                        foreach ($images as $k=>$v){                            if ($v['key'] == 'video') $isvideo = true;                        }                        if ($isvideo){                            $data['video'] = urldecode(json_encode(utf8_to_urlencode($images)));                        }else {                            $data['images'] = urldecode(json_encode(utf8_to_urlencode($images)));                        }                    }else {                        return showData(new \stdClass(), $images, 1);                    }                }            }        }        if ($this->add($data)){			Log::write("发布成功");            //添加用户积分            M('user')->where(array('uid'=>$data['uid']))->setInc('integral',1);            return showData(new \stdClass(), '发布成功');        }		Log::write("发布失败");        return showData(new \stdClass(), '发布失败', 1);    }    /**     * 留言列表     * @param int $uid     */    function lists($uid){    	Log::write("lists=" . json_encode($_REQUEST));        $map = array();        $lat = trim(I('lat'));        $lng = trim(I('lng'));        if (!$lat || !$lng) return showData(new \stdClass(), '请先定位', 1);                $cityid = trim(I('cityid'));                if($cityid) {        	$city = M("city")->where(Array('id'=>$cityid))->find();        	if ($city) $map['city'] = $city['name'];        }else{        /* $city = getDetailAddress($lat, $lng);        if ($city) $map['city'] = $city['result']['addressComponent']['city']; */        }                $type = trim(I('type', 0));        //红点提醒        $tip  = M('message_tip')->where(array('uid'=>$uid))->count();        if ($type){            if ($tip) {                M('message_tip')->where(array('uid'=>$uid))->setField('time2', NOW_TIME);            }else {                M('message_tip')->add(array('uid'=>$uid, 'time2'=>NOW_TIME));            }        }else {            if ($tip) {                M('message_tip')->where(array('uid'=>$uid))->setField('time1', NOW_TIME);            }else {                M('message_tip')->add(array('uid'=>$uid, 'time1'=>NOW_TIME));            }        }        $map['type'] = $type;        $map['_string'] = 's.uid in ( select uu.uid from tc_user uu where uu.uid=s.uid and uu.isshield = 0) and s.uid not in(select `fuid` from `'.$this->tablePrefix.'user_black` where `uid`='.$uid.')';        return self::_list($map, $uid);    }    /**     * 留言详细     * @param unknown $uid     * @param unknown $id     */    function detail($uid, $id){        $info = self::public_list($uid, array('s.id'=>$id), 1);        return showData($info);    }    /**     * 我的留言     */    function myLists($uid){        $map['uid'] = $uid;        return self::_list($map, $uid);    }    function hisLists($uid, $fuid){    	$map['uid'] = $fuid;    	return self::_list($map, $uid);    }    /**     * 添加赞和取消赞     * @param int $uid     * @param int $id     */    function praise($uid, $id) {        //$action = trim(I('action', 0));        $data   = array('uid'=>$uid, 'msgid'=>$id);        $db     = M('messages_praise');        $count  = $db->where($data)->count();        /* if ($action) {            //取消赞            if (!$count) return showData(new \stdClass(), '你没有赞该留言', 1);            if ($db->where($data)->delete()){                $this->where(array('id'=>$id))->setDec('praisecount');                return showData(new \stdClass(), '取消赞成功');            }            return showData(new \stdClass(), '取消赞失败', 1);        }else { */            //添加赞        if ($count) return showData(new \stdClass(), '你已赞了该留言', 1);        $data['createtime'] = NOW_TIME;        if ($db->add($data)){            $this->where(array('id'=>$id))->setInc('praisecount', 1);            return showData(new \stdClass(), '添加赞成功');        }        return showData(new \stdClass(), '添加赞失败', 1);        //}    }        function delMessages($uid, $id) {    	$where = "uid = $uid and id = $id";    	$result = M("messages")->where($where)->delete();    	if(!$result) {    		return showData(new \stdClass(), "操作失败", 1);    	}    	     	return showData(new \stdClass(), "操作成功");    }}